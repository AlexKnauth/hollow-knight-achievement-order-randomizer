#lang rhombus/static/and_meta

export:
  hollow_knight_achievement_order_randomizer
  is_achievement_order_in_logic
  print_achievement_order

import:
  rhombus/runtime_path
  rhombus/shrubbery
  lib("racket/base.rkt").#{open-input-file} as open_input_file
  "entry.rhm" open

runtime_path.def AARAO_txt: "AARAO.txt"
runtime_path.def Charms_txt: "Charms.txt"
runtime_path.def Completion_txt: "Completion.txt"
runtime_path.def Essence_txt: "Essence.txt"

def AARAO_in: open_input_file(AARAO_txt)
def Charms_in: open_input_file(Charms_txt)
def Completion_in: open_input_file(Completion_txt)
def Essence_in: open_input_file(Essence_txt)

def AARAO_shrb: shrubbery.read(AARAO_in)
def Charms_shrb: shrubbery.read(Charms_in)
def Completion_shrb: shrubbery.read(Completion_in)
def Essence_shrb: shrubbery.read(Essence_in)

def init:
  {
    #'SHADESKIP: #true,
    #'RANDOM_ESSENCE_DROPS: #false,
    #'TREES_AND_GHOSTS: #true,
  }

syntax_class NumericTerm:
  fields: function
  kind: ~term
| '$(num :: Num)': field function: fun(_): num.number
| '$(name :: Name)': field function: fun(map): Map.get(map, name.symbol, 0)

syntax_class RequirementsTerm:
  fields: function
  kind: ~term
| '#true': field function: fun(_): #true
| '#false': field function: fun(_): #false
| '$(name :: Name)':
    field function: fun(map): Map.get(map, name.symbol, #false)
| '($(requirements :: Group))':
    field function: requirements_group_function(requirements)

syntax_class RequirementsGroup:
  fields: function
  kind: ~group
| '$(a :: RequirementsTerm) $('+ $(b :: RequirementsTerm)') ...':
    field function: fun(map): all(a.function(map), b.function(map), ...)
| '$(a :: RequirementsTerm) $('|| $(b :: RequirementsTerm)') ...':
    field function: fun(map): any(a.function(map), b.function(map), ...)
| '$(x :: NumericTerm) <= $(y :: NumericTerm)':
    field function: fun(map): x.function(map) .<= y.function(map)

fun requirements_group_function('$(requirements :: RequirementsGroup)'):
  requirements.function

syntax_class RequirementEntry:
  kind: ~group
  fields: symbol; function
| '$(entry :: Entry)':
    field symbol: entry.symbol
    field function: requirements_group_function(entry.requirements)

syntax_class NumberEntry:
  kind: ~group
  fields: symbol; function
| '$(entry :: Entry)':
    field symbol: entry.symbol
    def requirement_function: requirements_group_function(entry.requirements)
    field function: fun(map): (requirement_function(map) && entry.number) || 0

syntax_class RequirementEntries:
  kind: ~multi
  fields: map
| '$(entry :: RequirementEntry); ...':
    field map: { entry.symbol: entry.function, ... }

syntax_class NumberEntries:
  kind: ~multi
  fields: map
| '$(entry :: NumberEntry); ...':
    field map: { entry.symbol: entry.function, ... }

def '$(AARAO_entries :: RequirementEntries)': AARAO_shrb
def '$(Charms_entries :: NumberEntries)': Charms_shrb
def '$(Completion_entries :: NumberEntries)': Completion_shrb
def '$(Essence_entries :: NumberEntries)': Essence_shrb

def AARAO_map :: Map: AARAO_entries.map
def Charms_map :: Map: Charms_entries.map
def Completion_map :: Map: Completion_entries.map
def Essence_map :: Map: Essence_entries.map

def AARAO_keys: AARAO_map.keys()
def Charms_keys: Charms_map.keys()
def Completion_keys: Completion_map.keys()
def Essence_keys: Essence_map.keys()

fun count_number_cap(keys :: List, map :: Map):
  fun(progression :: Map, cap :: Int):
    for values(n: 0) (k: keys):
      let v: map[k](progression)
      let nv: math.min(cap, n + v)
      final_when: cap <= nv
      nv

fun count_charms(progression :: Map):
  cond
  | Map.get(progression, #'Enchanted, #false): count_charms_cap(progression, 40)
  | Map.get(progression, #'Charmed, #false): count_charms_cap(progression, 19)
  | ~else: 0

def count_charms_cap: count_number_cap(Charms_keys, Charms_map)

def count_noncharm_completion_cap: count_number_cap(Completion_keys, Completion_map)

fun count_completion(progression :: Map):
  count_charms(progression) + count_noncharm_completion_cap(progression, 112)

def count_essence_cap: count_number_cap(Essence_keys, Essence_map)

fun count_essence(progression :: Map):
  cond
  | Map.get(progression, #'Attunement, #false): count_essence_cap(progression, 2400)
  | ~else: count_essence_cap(progression, 599)

fun progression_numbers(progression :: Map) :: Map:
  progression
    ++ { #'CHARMS: count_charms(progression),
         #'COMPLETION: count_completion(progression),
         #'ESSENCE: count_essence(progression) }

fun next(progression :: Map, remaining :: List):
  match remaining
  | []: #false
  | _:
      let possible:
        for List (x: remaining):
          keep_when: AARAO_map[x](progression)
          x
      possible[math.random(possible.length())]

fun loop(progression :: Map, remaining :: List, given :: List):
  let progression: progression_numbers(progression)
  let n: next(progression, remaining)
  cond
  | n: loop(progression ++ {n: #true}, remaining.remove(n), given.add(n))
  | ~else: given

fun hollow_knight_achievement_order_randomizer() :: List.of(Symbol):
  loop(init, AARAO_keys, [])

fun is_achievement_order_in_logic(order :: List.of(Symbol)) :: Boolean:
  for all (i: 0..order.length()):
    let [prev, ...]: order.take(i)
    let progression: progression_numbers(init ++ { prev: #true, ... })
    AARAO_map[order[i]](progression)

fun print_achievement_order(order :: List.of(Symbol)):
  for (a: order):
    println(a)

module main:
  print_achievement_order(hollow_knight_achievement_order_randomizer())

module test:
  fun index_of(lst :: List, v) :: maybe(Int):
    for values(_: #false) (e: lst, i: 0..):
      keep_when: e == v
      final_when: #true
      i
  check: index_of([#'a, #'b, #'c], #'b) ~is 1
  check: index_of([#'a, #'b, #'c], #'d) ~is #false

  check:
    is_achievement_order_in_logic([#'TestOfResolve, #'ProofOfResolve, #'Execution])
    ~is #true
  check:
    is_achievement_order_in_logic([#'ProofOfResolve, #'TestOfResolve, #'Execution])
    ~is #true
  check:
    is_achievement_order_in_logic([#'ProofOfResolve, #'Execution, #'TestOfResolve])
    ~is #false

  check:
    // 850 + 506 = 1356
    is_achievement_order_in_logic([#'Charmed,
                                   #'Attunement,
                                   #'Awakening])
    ~is #false
  check:
    // 850 + 250 + 506 = 1606
    is_achievement_order_in_logic([#'Charmed,
                                   #'TestOfResolve,
                                   #'ProofOfResolve,
                                   #'Attunement,
                                   #'Awakening])
    ~is #false
  check:
    // 850 + 300 + 506 = 1656
    is_achievement_order_in_logic([#'Charmed,
                                   #'Falsehood,
                                   #'Strength,
                                   #'Attunement,
                                   #'Awakening])
    ~is #false
  check:
    // 850 + 400 + 506 = 1756
    is_achievement_order_in_logic([#'Charmed,
                                   #'Release,
                                   #'Peace,
                                   #'Attunement,
                                   #'Awakening])
    ~is #false
  check:
    // 850 + 400 + 300 + 506 = 2056
    is_achievement_order_in_logic([#'Charmed,
                                   #'Release,
                                   #'Peace,
                                   #'Falsehood,
                                   #'Strength,
                                   #'Attunement,
                                   #'Awakening])
    ~is #true
  check:
    // 850 + 400 + 250 + 506 = 2006
    is_achievement_order_in_logic([#'Charmed,
                                   #'TestOfResolve,
                                   #'Release,
                                   #'Peace,
                                   #'ProofOfResolve,
                                   #'Attunement,
                                   #'Awakening])
    ~is #true
  check:
    // 850 + 300 + 250 + 506 = 1906
    is_achievement_order_in_logic([#'Charmed,
                                   #'TestOfResolve,
                                   #'Falsehood,
                                   #'Strength,
                                   #'ProofOfResolve,
                                   #'Attunement,
                                   #'Awakening])
    ~is #true

  for (_: 0..100):
    use_dynamic
    let order: hollow_knight_achievement_order_randomizer()
    check: order.length() ~is 63
    let hornet1: index_of(order, #'TestOfResolve)
    let hornet2: index_of(order, #'ProofOfResolve)
    let traitor_lord: index_of(order, #'Execution)
    let radiance: index_of(order, #'DreamNoMore)
    check: hornet1 < traitor_lord ~is #true
    check: hornet2 < traitor_lord ~is #true
    check: traitor_lord < radiance ~is #true
